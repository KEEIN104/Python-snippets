#::server::
#Threading and forking
#threaded http server
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from SocketServer import ThreadingMixIn
import threading

#handler
class Handler(BaseHTTPRequestHandler):
	
	def do_GET(self):
		self.send_response(200)
		self.end_headers()
		message = threading.currentThread().getName()
		self.wfile.write(message)
		self.wfile.write('\n')
		self.wfile.write('\n')
		return

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
	"""Handles requests in a separate thread."""

if __name__== '__main__':
	server = ThreadedHTTPServer(('localhost',8080),Handler)
	print 'Starting Server, use <ctrl-c> to stop'
	server.serve_forever()


#forking use process instead of thread

'''
random algorithm for accepting GET /incoming  connections
'''
